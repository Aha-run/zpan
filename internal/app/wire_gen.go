// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/saltbo/zpan/internal/app/api"
	"github.com/saltbo/zpan/internal/app/dao"
	"github.com/saltbo/zpan/internal/app/repo"
	"github.com/saltbo/zpan/internal/app/usecase"
	"github.com/saltbo/zpan/internal/app/usecase/storage"
	"github.com/saltbo/zpan/internal/app/usecase/uploader"
	"github.com/saltbo/zpan/internal/app/usecase/vfs"
)

// Injectors from wire.go:

func InitializeServer() *Server {
	dbQueryFactory := dao.NewDBQueryFactory()
	storageDBQuery := repo.NewStorageDBQuery(dbQueryFactory)
	cloudStorage := storage.NewCloudStorage(storageDBQuery)
	matterDBQuery := repo.NewMatterDBQuery(dbQueryFactory)
	cloudUploader := uploader.NewCloudUploader(cloudStorage, matterDBQuery)
	recycleBinDBQuery := repo.NewRecycleBinDBQuery(dbQueryFactory)
	vfsVfs := vfs.NewVfs(matterDBQuery, recycleBinDBQuery, cloudUploader)
	repository := usecase.NewRepository(cloudStorage, cloudUploader, vfsVfs)
	repoRepository := repo.NewRepository(storageDBQuery, matterDBQuery, recycleBinDBQuery)
	fileResource := api.NewFileResource(vfsVfs, cloudUploader)
	recycleBin := vfs.NewRecycleBin(recycleBinDBQuery, matterDBQuery, cloudStorage)
	recycleBinResource := api.NewRecycleBinResource(recycleBinDBQuery, recycleBin)
	shareResource := api.NewShareResource(matterDBQuery, vfsVfs)
	storageResource := api.NewStorageResource(storageDBQuery, cloudStorage)
	option := api.NewOptionResource()
	tokenResource := api.NewTokenResource()
	userResource := api.NewUserResource()
	userKeyResource := api.NewUserKeyResource()
	apiRepository := api.NewRepository(fileResource, recycleBinResource, shareResource, storageResource, option, tokenResource, userResource, userKeyResource)
	server := NewServer(repository, repoRepository, apiRepository)
	return server
}
